import os
os.environ["DJANGO_ALLOW_ASYNC_UNSAFE"] = "true"

# python-telegram-bot
# python manage.py telegram_bot 
from django.core.management.base import BaseCommand
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from website import settings

from asgiref.sync import sync_to_async
import logging
from account.models import Account
import aiohttp
from aiogram.utils.markdown import bold, code, italic, text
from aiogram.types import ParseMode
from aiogram.utils.emoji import emojize
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton

@sync_to_async
def extract_unique_code(text):
    return text.split()[1] if len(text.split()) > 1 else None

@sync_to_async
def get_account(unique_code):
    if Account.objects.filter(unique_code=unique_code).exists():
        return Account.objects.get(unique_code=unique_code)
    else:
        return None


bot = Bot(token=settings.TOKEN)
dp = Dispatcher(bot)

button1 = KeyboardButton('–©–æ –º–æ–∂–µ —Ä–æ–±–∏—Ç–∏ –ë–æ—Ç?')
button2 = InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –ø—Ä–æ—Ñ—ñ–ª—é', url="https://pidvezu.com.ua/profile/")

markup = ReplyKeyboardMarkup(resize_keyboard=True).add(button1).add(button2)

# how to register_next_step_handler aiogram python


# class Form(StatesGroup):
#     state = State() # –ó–∞–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

# @dp.message_handler(commands=['start'])
# async def start(message: types.Message):
#     await bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:')
#     await Form.state.set() # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

# @dp.message_handler(state=Form.state) # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
# async def start(message: types.Message, state: FSMContext):
#     async with state.proxy() as proxy: # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
#         state['state'] = message.text
#         await state.finish() # –í—ã–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

class Command(BaseCommand):
    help = '–¢–µ–ª–µ–≥—Ä–∞–º –ë–æ—Ç'

    def handle(self, *args, **options):

        @dp.message_handler(commands=['start'])
        async def process_start_command(message: types.Message):
            await types.ChatActions.typing() # "–ë–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç ..."

            unique_code = await extract_unique_code(message.text)
            if unique_code and await get_account(unique_code):
                account_obj = await get_account(unique_code)
                account_obj.chat_id = message.chat.id
                account_obj.save()

                first_name = message.from_user.first_name
                account_first_name = account_obj.first_name
                username = message.from_user.username
                try:
                    if first_name:
                        reply = "–ó–¥—Ä–∞—Å—Ç—É–π—Ç–µ {0}!".format(first_name)
                    elif account_first_name:
                        reply = "–ó–¥—Ä–∞—Å—Ç—É–π—Ç–µ {0}!".format(account_first_name)
                    elif username:
                        reply = "–ó–¥—Ä–∞—Å—Ç—É–π—Ç–µ {0}!".format(username)
                    else:
                        reply = "–ó–¥—Ä–∞—Å—Ç—É–π—Ç–µ!"
                except:
                    reply = "–ó–¥—Ä–∞—Å—Ç—É–π—Ç–µ!"

                if account_obj.telegram == False:
                    reply += ' –Ø –Ω–∞–¥—Å–∏–ª–∞—Ç–∏–º—É –í–∞–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É –í–∞—à–∏—Ö –∑—è–≤–æ–∫.\n–¢–∞–∫–æ–∂, –∫–æ–ª–∏ –í–∏ —Å–∫–ª–∞–¥–µ—Ç–µ –º–∞—Ä—à—Ä—É—Ç, —è –≤—ñ–¥–ø—Ä–∞–≤–ª—é –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –Ω—å–æ–≥–æ –≤ Google –ö–∞—Ä—Ç–∞—Ö.\n–£–≤—ñ–º–∫–Ω—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –ø–µ—Ä–µ—Ç—è–≥–Ω—É–≤—à–∏ –∫—Ä—É–∂–µ—á–æ–∫ —É –ø–æ–ª–µ Telegram.'

                    keyboard_markup = types.InlineKeyboardMarkup()
                    press_btn = types.InlineKeyboardButton('–£–≤—ñ–º–∫–Ω—É—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è', url="https://pidvezu.com.ua/profile/")
                    keyboard_markup.row(press_btn)
                    
                    await bot.send_message(message.from_user.id, reply, reply_markup=keyboard_markup)
                else:
                    await bot.send_message(message.from_user.id, reply, reply_markup=markup)

            else:
                reply = "–©–æ–± –º–∏ –º–æ–≥–ª–∏ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –í–∞—à—ñ –∑–∞—è–≤–∫–∏, –∑–∞–π–¥—ñ—Ç—å —á–µ—Ä–µ–∑ —Å–∞–π—Ç."
                
                keyboard_markup = types.InlineKeyboardMarkup()
                press_btn = types.InlineKeyboardButton('–ó–∞–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç', url="https://pidvezu.com.ua/telegram_bot/")
                keyboard_markup.row(press_btn)
                    
                await bot.send_message(message.from_user.id, reply, reply_markup=keyboard_markup)



        @dp.message_handler(commands=['help'])
        async def what_bot_can_do(message: types.Message):
            await types.ChatActions.typing() # "–ë–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç ..."

            msg = []
            msg.append(text("–ó —Ä–∞–¥—ñ—Å—Ç—é —Ä–æ–∑–ø–æ–≤—ñ–º–æ!)\n–ö–æ–ª–∏ –í–∏ —Ö–æ—á–µ—Ç–µ –ø–µ—Ä–µ–≤–µ–∑—Ç–∏ –≤–∞–Ω—Ç–∞–∂, –∞–±–æ –∂ —Ö–æ—á–µ—Ç–µ –ø—Ä–æ—ó—Ö–∞—Ç–∏, –í–∏ –ø–æ–¥–∞—î—Ç–µ ", italic("–∑–∞—è–≤–∫—É")," –≤–æ–¥—ñ—î–≤—ñ. –ö–æ–ª–∏ –π–æ–º—É –ø—Ä–∏–π–¥–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —Ü–µ, –º–∏ –≤—ñ–¥–ø—Ä–∞–≤–∏–º–æ –í–∞–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —Å—Ö–≤–∞–ª–∏–≤ —á–∏ –≤—ñ–¥—Ö–∏–ª–∏–≤ –≤—ñ–Ω —ó—ó :relaxed: \n"))
            msg.append(text("–Ø–∫—â–æ –í–∏ –≤–æ–¥—ñ–π, –ø—ñ—Å–ª—è —Å–∫–ª–∞–¥–∞–Ω–Ω—è ", italic("–º–∞—Ä—à—Ä—É—Ç–∞")," —ñ –ø—Ä–∏–π–æ–º—É –∑–∞—è–≤–æ–∫, –í–∏ –≤–∏–¥–∞–ª—è—î—Ç–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è. –ü—ñ—Å–ª—è —á–æ–≥–æ –º–∏ –í–∞–º –≤—ñ–¥–ø—Ä–∞–≤–∏–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ Google –ö–∞—Ä—Ç–∏ –∑ –ø–æ–≤–Ω—ñ—Å—Ç—é –ø–æ–±—É–¥–æ–≤–∞–Ω–∏–º –º–∞—Ä—à—Ä—É—Ç–æ–º.üåç")) # &#1F30D;	

            keyboard_markup = types.InlineKeyboardMarkup()
            press_btn = types.InlineKeyboardButton('–ü–æ–±—É–¥—É–≤–∞—Ç–∏ –º–∞—Ä—à—Ä—É—Ç', url="https://pidvezu.com.ua/add/")
            keyboard_markup.row(press_btn)
            
            await bot.send_message(message.chat.id, emojize(text(*msg, sep='\n')), parse_mode=ParseMode.MARKDOWN, reply_markup=keyboard_markup)


        @dp.message_handler()
        async def send_back(message: types.Message):
            if str(message.text).lower() == '–ø—Ä–∏–≤–µ—Ç' or str(message.text).lower() == '–ø—Ä–∏–≤—ñ—Ç':
                await bot.send_message(message.chat.id, '–ü—Ä–∏–≤—ñ—Ç!) –£ –º–µ–Ω–µ —î –±–∞–≥–∞—Ç–æ –∫–æ–º–∞–Ω–¥, —ñ–∑ —á–æ–≥–æ –ø–æ—á–Ω–µ–º–æ?', reply_markup=markup)
            if str(message.text).lower() == '—â–æ –º–æ–∂–µ —Ä–æ–±–∏—Ç–∏ –±–æ—Ç?':
                await what_bot_can_do(message)
            if str(message.text).lower() == '–ø–µ—Ä–µ–π—Ç–∏ –¥–æ –ø—Ä–æ—Ñ—ñ–ª—é':
                keyboard_markup = types.InlineKeyboardMarkup()
                press_btn = types.InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –ø—Ä–æ—Ñ—ñ–ª—é', url="https://pidvezu.com.ua/profile/")
                keyboard_markup.row(press_btn)
                
                await bot.send_message(message.chat.id, '–î–∞–≤–∞–π—Ç–µ –∑–º—ñ–Ω–∏–º–æ –í–∞—à—ñ –¥–∞–Ω—ñ', reply_markup=keyboard_markup)
   





        executor.start_polling(dp)